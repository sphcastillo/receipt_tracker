{
  "version": 3,
  "sources": ["../../../../../src/cli/lib/mcp/deploymentSelector.ts"],
  "sourcesContent": ["import { z } from \"zod\";\nimport { DeploymentSelection, deploymentSelectionSchema } from \"../api.js\";\n\n// Unfortunately, MCP clients don't seem to handle nested JSON objects very\n// well (even though this is within spec). To work around this, encode the\n// deployment selectors as an obfuscated string that the MCP client can\n// opaquely pass around.\nexport function encodeDeploymentSelector(\n  projectDir: string,\n  deployment: DeploymentSelection,\n) {\n  const payload = {\n    projectDir,\n    deployment,\n  };\n  return `${deployment.kind}:${btoa(JSON.stringify(payload))}`;\n}\n\nconst payloadSchema = z.object({\n  projectDir: z.string(),\n  deployment: deploymentSelectionSchema,\n});\n\nexport function decodeDeploymentSelector(encoded: string) {\n  const [_, serializedPayload] = encoded.split(\":\");\n  return payloadSchema.parse(JSON.parse(atob(serializedPayload)));\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAkB;AAClB,iBAA+D;AAMxD,SAAS,yBACd,YACA,YACA;AACA,QAAM,UAAU;AAAA,IACd;AAAA,IACA;AAAA,EACF;AACA,SAAO,GAAG,WAAW,IAAI,IAAI,KAAK,KAAK,UAAU,OAAO,CAAC,CAAC;AAC5D;AAEA,MAAM,gBAAgB,aAAE,OAAO;AAAA,EAC7B,YAAY,aAAE,OAAO;AAAA,EACrB,YAAY;AACd,CAAC;AAEM,SAAS,yBAAyB,SAAiB;AACxD,QAAM,CAAC,GAAG,iBAAiB,IAAI,QAAQ,MAAM,GAAG;AAChD,SAAO,cAAc,MAAM,KAAK,MAAM,KAAK,iBAAiB,CAAC,CAAC;AAChE;",
  "names": []
}
