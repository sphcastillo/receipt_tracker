{
  "version": 3,
  "sources": ["../../../../../../src/cli/lib/mcp/tools/status.ts"],
  "sourcesContent": ["import { RequestContext } from \"../requestContext.js\";\nimport {\n  DeploymentSelection,\n  fetchDeploymentCredentialsProvisionProd,\n} from \"../../api.js\";\nimport { deploymentSelectionFromOptions } from \"../../api.js\";\nimport { z } from \"zod\";\nimport { ConvexTool } from \"./index.js\";\nimport { deploymentDashboardUrlPage } from \"../../../dashboard.js\";\nimport { encodeDeploymentSelector } from \"../deploymentSelector.js\";\n\nconst projectDirDescription = `\nThe root directory of the Convex project. This is usually the editor's workspace directory\nand often includes the 'package.json' file and the 'convex/' folder.\n\nPass this option unless explicitly instructed not to.\n`;\n\nconst inputSchema = z.object({\n  projectDir: z.string().optional().describe(projectDirDescription),\n});\nconst outputSchema = z.object({\n  availableDeployments: z.array(\n    z.object({\n      kind: z.string(),\n      deploymentSelector: z.string(),\n      url: z.string(),\n      dashboardUrl: z.string().optional(),\n    }),\n  ),\n});\n\nconst description = `\nGet all available deployments for a given Convex project directory.\n\nUse this tool to find the deployment selector, URL, and dashboard URL for each\ndeployment associated with the project. Pass the deployment selector to other\ntools to target a specific deployment.\n\nWhen deployed to Convex Cloud, projects have a development ({\"kind\": \"ownDev\"}) and\nproduction ({\"kind\": \"ownProd\"}) deployment. Generally default to using the development\ndeployment unless you'd specifically like to debug issues in production.\n\nWhen running locally, there will be a single \"urlWithAdminKey\" deployment.\n`.trim();\n\nexport const StatusTool: ConvexTool<typeof inputSchema, typeof outputSchema> = {\n  name: \"status\",\n  description,\n  inputSchema,\n  outputSchema,\n  handler: async (ctx: RequestContext, input) => {\n    const projectDir = input.projectDir ?? ctx.options.projectDir;\n    if (projectDir === undefined) {\n      return await ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage:\n          \"No project directory provided. Either provide the `projectDir` argument or configure the MCP server with the `--project-dir` flag.\",\n      });\n    }\n    process.chdir(projectDir);\n    const deployment = await deploymentSelectionFromOptions(ctx, ctx.options);\n    const credentials = await fetchDeploymentCredentialsProvisionProd(\n      ctx,\n      deployment,\n    );\n    const availableDeployments = [\n      {\n        kind: deployment.kind,\n        deploymentSelector: encodeDeploymentSelector(projectDir, deployment),\n        url: credentials.url,\n        dashboardUrl:\n          credentials.deploymentName &&\n          deploymentDashboardUrlPage(credentials.deploymentName, \"\"),\n      },\n    ];\n    if (deployment.kind === \"ownDev\") {\n      const prodDeployment: DeploymentSelection = { kind: \"ownProd\" };\n      const prodCredentials = await fetchDeploymentCredentialsProvisionProd(\n        ctx,\n        prodDeployment,\n      );\n      if (prodCredentials.deploymentName && prodCredentials.deploymentType) {\n        availableDeployments.push({\n          kind: prodDeployment.kind,\n          deploymentSelector: encodeDeploymentSelector(\n            projectDir,\n            prodDeployment,\n          ),\n          url: prodCredentials.url,\n          dashboardUrl: deploymentDashboardUrlPage(\n            prodCredentials.deploymentName,\n            \"\",\n          ),\n        });\n      }\n    }\n    return { availableDeployments };\n  },\n};\n"],
  "mappings": ";AACA;AAAA,EAEE;AAAA,OACK;AACP,SAAS,sCAAsC;AAC/C,SAAS,SAAS;AAElB,SAAS,kCAAkC;AAC3C,SAAS,gCAAgC;AAEzC,MAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAO9B,MAAM,cAAc,EAAE,OAAO;AAAA,EAC3B,YAAY,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,qBAAqB;AAClE,CAAC;AACD,MAAM,eAAe,EAAE,OAAO;AAAA,EAC5B,sBAAsB,EAAE;AAAA,IACtB,EAAE,OAAO;AAAA,MACP,MAAM,EAAE,OAAO;AAAA,MACf,oBAAoB,EAAE,OAAO;AAAA,MAC7B,KAAK,EAAE,OAAO;AAAA,MACd,cAAc,EAAE,OAAO,EAAE,SAAS;AAAA,IACpC,CAAC;AAAA,EACH;AACF,CAAC;AAED,MAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYlB,KAAK;AAEA,aAAM,aAAkE;AAAA,EAC7E,MAAM;AAAA,EACN;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAS,OAAO,KAAqB,UAAU;AAC7C,UAAM,aAAa,MAAM,cAAc,IAAI,QAAQ;AACnD,QAAI,eAAe,QAAW;AAC5B,aAAO,MAAM,IAAI,MAAM;AAAA,QACrB,UAAU;AAAA,QACV,WAAW;AAAA,QACX,gBACE;AAAA,MACJ,CAAC;AAAA,IACH;AACA,YAAQ,MAAM,UAAU;AACxB,UAAM,aAAa,MAAM,+BAA+B,KAAK,IAAI,OAAO;AACxE,UAAM,cAAc,MAAM;AAAA,MACxB;AAAA,MACA;AAAA,IACF;AACA,UAAM,uBAAuB;AAAA,MAC3B;AAAA,QACE,MAAM,WAAW;AAAA,QACjB,oBAAoB,yBAAyB,YAAY,UAAU;AAAA,QACnE,KAAK,YAAY;AAAA,QACjB,cACE,YAAY,kBACZ,2BAA2B,YAAY,gBAAgB,EAAE;AAAA,MAC7D;AAAA,IACF;AACA,QAAI,WAAW,SAAS,UAAU;AAChC,YAAM,iBAAsC,EAAE,MAAM,UAAU;AAC9D,YAAM,kBAAkB,MAAM;AAAA,QAC5B;AAAA,QACA;AAAA,MACF;AACA,UAAI,gBAAgB,kBAAkB,gBAAgB,gBAAgB;AACpE,6BAAqB,KAAK;AAAA,UACxB,MAAM,eAAe;AAAA,UACrB,oBAAoB;AAAA,YAClB;AAAA,YACA;AAAA,UACF;AAAA,UACA,KAAK,gBAAgB;AAAA,UACrB,cAAc;AAAA,YACZ,gBAAgB;AAAA,YAChB;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AACA,WAAO,EAAE,qBAAqB;AAAA,EAChC;AACF;",
  "names": []
}
