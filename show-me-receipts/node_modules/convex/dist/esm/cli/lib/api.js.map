{
  "version": 3,
  "sources": ["../../../../src/cli/lib/api.ts"],
  "sourcesContent": ["import * as dotenv from \"dotenv\";\nimport { Context, logVerbose } from \"../../bundler/context.js\";\nimport {\n  CONVEX_DEPLOYMENT_VAR_NAME,\n  deploymentNameFromAdminKeyOrCrash,\n  deploymentTypeFromAdminKey,\n  getConfiguredDeploymentFromEnvVar,\n  getTeamAndProjectFromPreviewAdminKey,\n  isPreviewDeployKey,\n  isProjectKey,\n} from \"./deployment.js\";\nimport { buildEnvironment } from \"./envvars.js\";\nimport { assertLocalBackendRunning } from \"./localDeployment/run.js\";\nimport { checkAuthorization, performLogin } from \"./login.js\";\nimport {\n  CONVEX_DEPLOY_KEY_ENV_VAR_NAME,\n  CONVEX_SELF_HOSTED_ADMIN_KEY_VAR_NAME,\n  CONVEX_SELF_HOSTED_URL_VAR_NAME,\n  ENV_VAR_FILE_PATH,\n  bigBrainAPI,\n  bigBrainAPIMaybeThrows,\n  getAuthHeaderForBigBrain,\n  getConfiguredDeployment,\n  getConfiguredDeploymentNameOrCrash,\n  readAdminKeyFromEnvVar,\n} from \"./utils/utils.js\";\nimport { z } from \"zod\";\n\nexport type DeploymentName = string;\nexport type DeploymentType = \"dev\" | \"prod\" | \"local\";\n\nexport type Project = {\n  id: string;\n  name: string;\n  slug: string;\n  isDemo: boolean;\n};\n\ntype AdminKey = string;\n\n// Provision a new empty project and return the slugs.\nexport async function createProject(\n  ctx: Context,\n  {\n    teamSlug: selectedTeamSlug,\n    projectName,\n    partitionId,\n    deploymentTypeToProvision,\n  }: {\n    teamSlug: string;\n    projectName: string;\n    partitionId?: number;\n    deploymentTypeToProvision: DeploymentType;\n  },\n): Promise<{\n  projectSlug: string;\n  teamSlug: string;\n  projectsRemaining: number;\n}> {\n  const provisioningArgs = {\n    team: selectedTeamSlug,\n    projectName,\n    // TODO: Consider allowing projects with no deployments, or consider switching\n    // to provisioning prod on creation.\n    deploymentType: deploymentTypeToProvision,\n    partitionId,\n  };\n  const data = await bigBrainAPI({\n    ctx,\n    method: \"POST\",\n    url: \"create_project\",\n    data: provisioningArgs,\n  });\n  const { projectSlug, teamSlug, projectsRemaining } = data;\n  if (\n    projectSlug === undefined ||\n    teamSlug === undefined ||\n    projectsRemaining === undefined\n  ) {\n    const error =\n      \"Unexpected response during provisioning: \" + JSON.stringify(data);\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"transient\",\n      errForSentry: error,\n      printedMessage: error,\n    });\n  }\n  return {\n    projectSlug,\n    teamSlug,\n    projectsRemaining,\n  };\n}\n\n// Dev\nexport async function fetchDeploymentCredentialsForName(\n  ctx: Context,\n  deploymentName: DeploymentName,\n  deploymentType: DeploymentType,\n): Promise<\n  | {\n      deploymentName: string;\n      adminKey: string;\n      url: string;\n      deploymentType: DeploymentType;\n    }\n  | { error: unknown }\n> {\n  let data;\n  try {\n    data = await bigBrainAPIMaybeThrows({\n      ctx,\n      method: \"POST\",\n      url: \"deployment/authorize_for_name\",\n      data: {\n        deploymentName,\n        deploymentType,\n      },\n    });\n  } catch (error: unknown) {\n    return { error };\n  }\n  const adminKey: string = data.adminKey;\n  const url: string = data.url;\n  const resultDeploymentType: DeploymentType = data.deploymentType;\n  if (adminKey === undefined || url === undefined) {\n    const msg = \"Unknown error during authorization: \" + JSON.stringify(data);\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"transient\",\n      errForSentry: new Error(msg),\n      printedMessage: msg,\n    });\n  }\n  return {\n    deploymentName,\n    adminKey,\n    url,\n    deploymentType: resultDeploymentType,\n  };\n}\n\nexport const deploymentSelectionSchema = z.discriminatedUnion(\"kind\", [\n  z.object({ kind: z.literal(\"deployKey\") }),\n  z.object({ kind: z.literal(\"previewName\"), previewName: z.string() }),\n  z.object({ kind: z.literal(\"deploymentName\"), deploymentName: z.string() }),\n  z.object({ kind: z.literal(\"ownProd\"), partitionId: z.number().optional() }),\n  z.object({ kind: z.literal(\"ownDev\") }),\n  z.object({ kind: z.literal(\"projectKey\"), prod: z.boolean() }),\n  z.object({\n    kind: z.literal(\"urlWithAdminKey\"),\n    url: z.string(),\n    adminKey: z.string(),\n  }),\n  z.object({ kind: z.literal(\"urlWithLogin\"), url: z.string() }),\n]);\n\nexport type DeploymentSelection = z.infer<typeof deploymentSelectionSchema>;\n\nexport function storeAdminKeyEnvVar(adminKeyOption?: string | null) {\n  if (adminKeyOption) {\n    // So we don't have to worry about passing through the admin key everywhere\n    // if it's explicitly overridden by a CLI option, override the env variable\n    // directly.\n    process.env[CONVEX_DEPLOY_KEY_ENV_VAR_NAME] = adminKeyOption;\n  }\n}\n\nexport type DeploymentSelectionOptions = {\n  // Whether to default to prod\n  prod?: boolean | undefined;\n  // Whether to default to prod implied by the command, not as an explicit\n  // choice by the user.\n  implicitProd?: boolean | undefined;\n\n  previewName?: string | undefined;\n  deploymentName?: string | undefined;\n  url?: string | undefined;\n  adminKey?: string | undefined;\n  partitionId?: string | undefined;\n  envFile?: string | undefined;\n};\n\nexport async function deploymentSelectionFromOptions(\n  ctx: Context,\n  options: DeploymentSelectionOptions,\n  extraCloudFlags: [string, string][] = [],\n): Promise<DeploymentSelection> {\n  if (options.envFile) {\n    // If --env-file is provided, use that instead of .env.local and .env.\n    dotenv.config({ path: options.envFile });\n  } else {\n    dotenv.config({ path: ENV_VAR_FILE_PATH });\n    dotenv.config();\n  }\n  storeAdminKeyEnvVar(options.adminKey);\n  const adminKey = readAdminKeyFromEnvVar();\n  const url = options.url;\n  if (url !== undefined && adminKey !== undefined) {\n    return { kind: \"urlWithAdminKey\", url, adminKey };\n  }\n  const cloudFlags: [string, string][] = [\n    [\"previewName\", \"--preview-name\"],\n    [\"prod\", \"--prod\"],\n    [\"deploymentName\", \"--deployment-name\"],\n    ...extraCloudFlags,\n  ];\n  const selfHostedCredentials = await selfHostedCredentialsFromEnv(\n    ctx,\n    options,\n    cloudFlags,\n  );\n  if (selfHostedCredentials) {\n    return {\n      kind: \"urlWithAdminKey\",\n      url: selfHostedCredentials.selfHostedUrl,\n      adminKey: selfHostedCredentials.selfHostedAdminKey,\n    };\n  }\n  // Now we know we're not self-hosted, we can talk to cloud convex.\n  if (url !== undefined) {\n    return { kind: \"urlWithLogin\", url };\n  }\n  if (options.previewName !== undefined) {\n    return { kind: \"previewName\", previewName: options.previewName };\n  }\n  if (options.deploymentName !== undefined) {\n    return { kind: \"deploymentName\", deploymentName: options.deploymentName };\n  }\n  const wantProd = options.prod === true || options.implicitProd === true;\n  if (adminKey !== undefined) {\n    if (isProjectKey(adminKey)) {\n      return { kind: \"projectKey\", prod: wantProd };\n    }\n    return { kind: \"deployKey\" };\n  }\n  const partitionId = options.partitionId\n    ? parseInt(options.partitionId)\n    : undefined;\n  return {\n    kind: wantProd ? \"ownProd\" : \"ownDev\",\n    partitionId,\n  };\n}\n\nexport async function selfHostedCredentialsFromEnv(\n  ctx: Context,\n  options: { envFile?: string | undefined } & Record<string, unknown>,\n  cloudFlags: [string, string][],\n): Promise<\n  | {\n      selfHostedUrl: string;\n      selfHostedAdminKey: AdminKey;\n    }\n  | undefined\n> {\n  if (options.envFile) {\n    // If --env-file is provided, use that instead of .env.local and .env.\n    dotenv.config({ path: options.envFile });\n  } else {\n    dotenv.config({ path: ENV_VAR_FILE_PATH });\n    dotenv.config();\n  }\n  const selfHostedUrl = process.env[CONVEX_SELF_HOSTED_URL_VAR_NAME];\n  const selfHostedAdminKey = process.env[CONVEX_SELF_HOSTED_ADMIN_KEY_VAR_NAME];\n  if (!!selfHostedUrl !== !!selfHostedAdminKey) {\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: `Env variables ${CONVEX_SELF_HOSTED_URL_VAR_NAME} and ${CONVEX_SELF_HOSTED_ADMIN_KEY_VAR_NAME} must be set together.`,\n    });\n  }\n  if (selfHostedUrl && selfHostedAdminKey) {\n    const configuredDeployment = getConfiguredDeploymentFromEnvVar();\n    // The SELF_HOSTED env variables and CONVEX_DEPLOYMENT are mutually exclusive.\n    if (configuredDeployment.name) {\n      return await ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage: `Env variable ${CONVEX_SELF_HOSTED_URL_VAR_NAME} indicates a self-hosted deployment, which is incompatible with cloud-hosted env variable ${CONVEX_DEPLOYMENT_VAR_NAME}. Remove one of them before running the command again.`,\n      });\n    }\n    for (const [flag, flagName] of cloudFlags) {\n      if (options[flag]) {\n        return await ctx.crash({\n          exitCode: 1,\n          errorType: \"fatal\",\n          printedMessage: `Env variable ${CONVEX_SELF_HOSTED_URL_VAR_NAME} indicates a self-hosted deployment, which is incompatible with cloud-hosted flag ${flagName}. Remove one of them before running the command again.`,\n        });\n      }\n    }\n    return { selfHostedUrl, selfHostedAdminKey };\n  }\n  return undefined;\n}\n\n// Deploy\nexport async function fetchDeploymentCredentialsWithinCurrentProject(\n  ctx: Context,\n  deploymentSelection: DeploymentSelection,\n): Promise<{\n  url: string;\n  adminKey: AdminKey;\n  deploymentName?: string;\n  deploymentType?: string | undefined;\n}> {\n  if (deploymentSelection.kind === \"urlWithAdminKey\") {\n    return {\n      adminKey: deploymentSelection.adminKey,\n      url: deploymentSelection.url,\n    };\n  }\n\n  const configuredAdminKey = readAdminKeyFromEnvVar();\n\n  // Crash if we know that DEPLOY_KEY (adminKey) is required\n  if (configuredAdminKey === undefined) {\n    const buildEnvironmentExpectsConvexDeployKey = buildEnvironment();\n    if (buildEnvironmentExpectsConvexDeployKey) {\n      return await ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage:\n          `${buildEnvironmentExpectsConvexDeployKey} build environment detected but ${CONVEX_DEPLOY_KEY_ENV_VAR_NAME} is not set. ` +\n          `Set this environment variable to deploy from this environment. See https://docs.convex.dev/production/hosting`,\n      });\n    }\n    const header = await getAuthHeaderForBigBrain(ctx);\n    if (!header) {\n      return await ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage:\n          `Error: You are not logged in. Log in with \\`npx convex dev\\` or set the ${CONVEX_DEPLOY_KEY_ENV_VAR_NAME} environment variable. ` +\n          `See https://docs.convex.dev/production/hosting`,\n      });\n    }\n    const configuredDeployment = (await getConfiguredDeployment(ctx)).name;\n    if (configuredDeployment === null) {\n      return await ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage:\n          \"No CONVEX_DEPLOYMENT set, run `npx convex dev` to configure a Convex project\",\n      });\n    }\n  }\n\n  const data = await fetchDeploymentCredentialsWithinCurrentProjectInner(\n    ctx,\n    deploymentSelection,\n    configuredAdminKey,\n  );\n  const { deploymentName, adminKey, deploymentType, url } = data;\n  if (\n    adminKey === undefined ||\n    url === undefined ||\n    deploymentName === undefined\n  ) {\n    const msg = \"Unknown error during authorization: \" + JSON.stringify(data);\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"transient\",\n      errForSentry: new Error(msg),\n      printedMessage: msg,\n    });\n  }\n  return {\n    deploymentName,\n    adminKey,\n    url,\n    deploymentType,\n  };\n}\n\ntype ProjectSelection =\n  | {\n      kind: \"deploymentName\";\n      // Identify a project by one of the deployments in it.\n      deploymentName: string;\n    }\n  | {\n      kind: \"teamAndProjectSlugs\";\n      // Identify a project by its team and slug.\n      teamSlug: string;\n      projectSlug: string;\n    };\n\nexport async function projectSelection(\n  ctx: Context,\n  configuredDeployment: string | null,\n  configuredAdminKey: string | undefined,\n): Promise<ProjectSelection> {\n  if (\n    configuredAdminKey !== undefined &&\n    isPreviewDeployKey(configuredAdminKey)\n  ) {\n    const { teamSlug, projectSlug } =\n      await getTeamAndProjectFromPreviewAdminKey(ctx, configuredAdminKey);\n    return {\n      kind: \"teamAndProjectSlugs\",\n      teamSlug,\n      projectSlug,\n    };\n  }\n  if (configuredAdminKey !== undefined) {\n    return {\n      kind: \"deploymentName\",\n      deploymentName: await deploymentNameFromAdminKeyOrCrash(\n        ctx,\n        configuredAdminKey,\n      ),\n    };\n  }\n  if (configuredDeployment) {\n    return {\n      kind: \"deploymentName\",\n      deploymentName: configuredDeployment,\n    };\n  }\n  return await ctx.crash({\n    exitCode: 1,\n    errorType: \"fatal\",\n    printedMessage:\n      \"Select project by setting `CONVEX_DEPLOYMENT` with `npx convex dev` or `CONVEX_DEPLOY_KEY` from the Convex dashboard.\",\n  });\n}\n\nasync function fetchDeploymentCredentialsWithinCurrentProjectInner(\n  ctx: Context,\n  deploymentSelection: Exclude<\n    DeploymentSelection,\n    { kind: \"urlWithAdminKey\"; url: string; adminKey: string }\n  >,\n  configuredAdminKey: string | undefined,\n): Promise<{\n  deploymentName?: string;\n  adminKey?: string;\n  url?: string;\n  deploymentType?: string;\n}> {\n  const configuredDeployment = getConfiguredDeploymentFromEnvVar().name;\n  switch (deploymentSelection.kind) {\n    case \"ownDev\": {\n      return {\n        ...(await fetchExistingDevDeploymentCredentialsOrCrash(\n          ctx,\n          configuredDeployment!,\n        )),\n        deploymentName: configuredDeployment!,\n      };\n    }\n    case \"ownProd\":\n      return await bigBrainAPI({\n        ctx,\n        method: \"POST\",\n        url: \"deployment/authorize_prod\",\n        data: {\n          deploymentName: configuredDeployment,\n          partitionId: deploymentSelection.partitionId,\n        },\n      });\n    case \"previewName\":\n      return await bigBrainAPI({\n        ctx,\n        method: \"POST\",\n        url: \"deployment/authorize_preview\",\n        data: {\n          previewName: deploymentSelection.previewName,\n          projectSelection: await projectSelection(\n            ctx,\n            configuredDeployment,\n            configuredAdminKey,\n          ),\n        },\n      });\n    case \"deploymentName\":\n      return await bigBrainAPI({\n        ctx,\n        method: \"POST\",\n        url: \"deployment/authorize_within_current_project\",\n        data: {\n          selectedDeploymentName: deploymentSelection.deploymentName,\n          projectSelection: await projectSelection(\n            ctx,\n            configuredDeployment,\n            configuredAdminKey,\n          ),\n        },\n      });\n    case \"deployKey\": {\n      const deploymentName = await deploymentNameFromAdminKeyOrCrash(\n        ctx,\n        configuredAdminKey!,\n      );\n      let url = await deriveUrlFromAdminKey(ctx, configuredAdminKey!);\n      // We cannot derive the deployment URL from the deploy key\n      // when running against local big brain, so use the name to get the URL.\n      if (process.env.CONVEX_PROVISION_HOST !== undefined) {\n        url = await bigBrainAPI({\n          ctx,\n          method: \"POST\",\n          url: \"deployment/url_for_key\",\n          data: {\n            deployKey: configuredAdminKey,\n          },\n        });\n      }\n      const deploymentType = deploymentTypeFromAdminKey(configuredAdminKey!);\n      return {\n        adminKey: configuredAdminKey,\n        url,\n        deploymentName,\n        deploymentType,\n      };\n    }\n    case \"projectKey\": {\n      const deploymentType = deploymentSelection.prod ? \"prod\" : \"dev\";\n      const credentials =\n        await fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows(\n          ctx,\n          { teamSlug: null, projectSlug: null },\n          deploymentType,\n          undefined /* partitionId */,\n        );\n      return {\n        adminKey: credentials.adminKey,\n        url: credentials.deploymentUrl,\n        deploymentName: credentials.deploymentName,\n        deploymentType: deploymentType,\n      };\n    }\n    case \"urlWithLogin\":\n      return {\n        ...(await bigBrainAPI({\n          ctx,\n          method: \"POST\",\n          url: \"deployment/authorize_within_current_project\",\n          data: {\n            selectedDeploymentName: configuredDeployment,\n            projectSelection: await projectSelection(\n              ctx,\n              configuredDeployment,\n              configuredAdminKey,\n            ),\n          },\n        })),\n        url: deploymentSelection.url,\n      };\n    default: {\n      const _exhaustivenessCheck: never = deploymentSelection;\n      return ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        // This should be unreachable, so don't bother with a printed message.\n        printedMessage: null,\n        errForSentry: `Unexpected deployment selection: ${deploymentSelection as any}`,\n      });\n    }\n  }\n}\n\n// Run, Import, many others\nexport async function fetchDeploymentCredentialsProvisionProd(\n  ctx: Context,\n  deploymentSelection: DeploymentSelection,\n  { ensureLocalRunning } = { ensureLocalRunning: true },\n): Promise<{\n  url: string;\n  adminKey: AdminKey;\n  deploymentName?: string;\n  deploymentType?: string;\n}> {\n  if (\n    deploymentSelection.kind === \"ownDev\" &&\n    !(await checkAuthorization(ctx, false))\n  ) {\n    await performLogin(ctx);\n  }\n\n  if (deploymentSelection.kind !== \"ownDev\") {\n    const result = await fetchDeploymentCredentialsWithinCurrentProject(\n      ctx,\n      deploymentSelection,\n    );\n    logVerbose(\n      ctx,\n      `Deployment URL: ${result.url}, Deployment Name: ${result.deploymentName}, Deployment Type: ${result.deploymentType}`,\n    );\n    return {\n      url: result.url,\n      adminKey: result.adminKey,\n      deploymentName: result.deploymentName,\n      deploymentType: result.deploymentType,\n    };\n  }\n\n  const configuredDeployment = await getConfiguredDeploymentNameOrCrash(ctx);\n  const result = await fetchExistingDevDeploymentCredentialsOrCrash(\n    ctx,\n    configuredDeployment,\n  );\n  logVerbose(\n    ctx,\n    `Deployment URL: ${result.url}, Deployment Name: ${configuredDeployment}, Deployment Type: ${result.deploymentType}`,\n  );\n  if (ensureLocalRunning && configuredDeployment?.startsWith(\"local-\")) {\n    await assertLocalBackendRunning(ctx, {\n      url: result.url,\n      deploymentName: configuredDeployment,\n    });\n  }\n  return {\n    url: result.url,\n    adminKey: result.adminKey,\n    deploymentType: result.deploymentType,\n    deploymentName: configuredDeployment,\n  };\n}\n\nexport async function fetchTeamAndProject(\n  ctx: Context,\n  deploymentName: string,\n) {\n  const data = (await bigBrainAPI({\n    ctx,\n    method: \"GET\",\n    url: `deployment/${deploymentName}/team_and_project`,\n  })) as {\n    team: string; // slug\n    project: string; // slug\n    teamId: number;\n    projectId: number;\n  };\n\n  const { team, project } = data;\n  if (team === undefined || project === undefined) {\n    const msg =\n      \"Unknown error when fetching team and project: \" + JSON.stringify(data);\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"transient\",\n      errForSentry: new Error(msg),\n      printedMessage: msg,\n    });\n  }\n\n  return data;\n}\n\n// Used by dev for upgrade from team and project in convex.json to CONVEX_DEPLOYMENT\nexport async function fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows(\n  ctx: Context,\n  {\n    teamSlug,\n    projectSlug,\n  }:\n    | { teamSlug: string; projectSlug: string }\n    | { teamSlug: null; projectSlug: null },\n  deploymentType: DeploymentType,\n  partitionId: number | undefined,\n): Promise<{\n  deploymentName: string;\n  deploymentUrl: string;\n  adminKey: AdminKey;\n}> {\n  const data = await bigBrainAPIMaybeThrows({\n    ctx,\n    method: \"POST\",\n    url: \"deployment/provision_and_authorize\",\n    data: {\n      teamSlug,\n      projectSlug,\n      deploymentType,\n      partitionId,\n    },\n  });\n  const deploymentName = data.deploymentName;\n  const adminKey = data.adminKey;\n  const url = data.url;\n  if (adminKey === undefined || url === undefined) {\n    const msg = \"Unknown error during authorization: \" + JSON.stringify(data);\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"transient\",\n      errForSentry: new Error(msg),\n      printedMessage: msg,\n    });\n  }\n  return { adminKey, deploymentUrl: url, deploymentName };\n}\n\ntype Credentials = {\n  url: string;\n  adminKey: AdminKey;\n  deploymentType: DeploymentType;\n};\n\ntype DevCredentials = Credentials & {\n  deploymentType: \"dev\";\n};\n\nfunction credentialsAsDevCredentials(cred: Credentials): DevCredentials {\n  if (cred.deploymentType === \"dev\") {\n    return cred as DevCredentials;\n  }\n  // Getting this wrong is a programmer error.\n  // eslint-disable-next-line no-restricted-syntax\n  throw new Error(\"Credentials are not for a dev deployment.\");\n}\n\nasync function fetchExistingDevDeploymentCredentialsOrCrash(\n  ctx: Context,\n  deploymentName: DeploymentName,\n): Promise<DevCredentials> {\n  const credentials = await fetchDeploymentCredentialsForName(\n    ctx,\n    deploymentName,\n    \"dev\",\n  );\n  if (\"error\" in credentials) {\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"invalid filesystem data\",\n      errForSentry: credentials.error,\n      printedMessage: `Failed to authorize \"${deploymentName}\" configured in CONVEX_DEPLOYMENT, run \\`npx convex dev\\` to configure a Convex project`,\n    });\n  }\n  if (credentials.deploymentType !== \"dev\") {\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"invalid filesystem data\",\n      printedMessage: `Deployment \"${deploymentName}\" is not a dev deployment`,\n    });\n  }\n  return credentialsAsDevCredentials(credentials);\n}\n\n// This returns the url of the deployment from an admin key in the format\n//      \"tall-forest-1234|1a2b35123541\"\n//   or \"prod:tall-forest-1234|1a2b35123541\"\nasync function deriveUrlFromAdminKey(ctx: Context, adminKey: string) {\n  const deploymentName = await deploymentNameFromAdminKeyOrCrash(ctx, adminKey);\n  return `https://${deploymentName}.convex.cloud`;\n}\n"],
  "mappings": "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",
  "names": ["result"]
}
