import { Context } from "../../bundler/context.js";
import { z } from "zod";
export type DeploymentName = string;
export type DeploymentType = "dev" | "prod" | "local";
export type Project = {
    id: string;
    name: string;
    slug: string;
    isDemo: boolean;
};
type AdminKey = string;
export declare function createProject(ctx: Context, { teamSlug: selectedTeamSlug, projectName, partitionId, deploymentTypeToProvision, }: {
    teamSlug: string;
    projectName: string;
    partitionId?: number;
    deploymentTypeToProvision: DeploymentType;
}): Promise<{
    projectSlug: string;
    teamSlug: string;
    projectsRemaining: number;
}>;
export declare function fetchDeploymentCredentialsForName(ctx: Context, deploymentName: DeploymentName, deploymentType: DeploymentType): Promise<{
    deploymentName: string;
    adminKey: string;
    url: string;
    deploymentType: DeploymentType;
} | {
    error: unknown;
}>;
export declare const deploymentSelectionSchema: z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
    kind: z.ZodLiteral<"deployKey">;
}, "strip", z.ZodTypeAny, {
    kind: "deployKey";
}, {
    kind: "deployKey";
}>, z.ZodObject<{
    kind: z.ZodLiteral<"previewName">;
    previewName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    kind: "previewName";
    previewName: string;
}, {
    kind: "previewName";
    previewName: string;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"deploymentName">;
    deploymentName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    kind: "deploymentName";
    deploymentName: string;
}, {
    kind: "deploymentName";
    deploymentName: string;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"ownProd">;
    partitionId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    kind: "ownProd";
    partitionId?: number | undefined;
}, {
    kind: "ownProd";
    partitionId?: number | undefined;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"ownDev">;
}, "strip", z.ZodTypeAny, {
    kind: "ownDev";
}, {
    kind: "ownDev";
}>, z.ZodObject<{
    kind: z.ZodLiteral<"projectKey">;
    prod: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    kind: "projectKey";
    prod: boolean;
}, {
    kind: "projectKey";
    prod: boolean;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"urlWithAdminKey">;
    url: z.ZodString;
    adminKey: z.ZodString;
}, "strip", z.ZodTypeAny, {
    kind: "urlWithAdminKey";
    adminKey: string;
    url: string;
}, {
    kind: "urlWithAdminKey";
    adminKey: string;
    url: string;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"urlWithLogin">;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    kind: "urlWithLogin";
    url: string;
}, {
    kind: "urlWithLogin";
    url: string;
}>]>;
export type DeploymentSelection = z.infer<typeof deploymentSelectionSchema>;
export declare function storeAdminKeyEnvVar(adminKeyOption?: string | null): void;
export type DeploymentSelectionOptions = {
    prod?: boolean | undefined;
    implicitProd?: boolean | undefined;
    previewName?: string | undefined;
    deploymentName?: string | undefined;
    url?: string | undefined;
    adminKey?: string | undefined;
    partitionId?: string | undefined;
    envFile?: string | undefined;
};
export declare function deploymentSelectionFromOptions(ctx: Context, options: DeploymentSelectionOptions, extraCloudFlags?: [string, string][]): Promise<DeploymentSelection>;
export declare function selfHostedCredentialsFromEnv(ctx: Context, options: {
    envFile?: string | undefined;
} & Record<string, unknown>, cloudFlags: [string, string][]): Promise<{
    selfHostedUrl: string;
    selfHostedAdminKey: AdminKey;
} | undefined>;
export declare function fetchDeploymentCredentialsWithinCurrentProject(ctx: Context, deploymentSelection: DeploymentSelection): Promise<{
    url: string;
    adminKey: AdminKey;
    deploymentName?: string;
    deploymentType?: string | undefined;
}>;
type ProjectSelection = {
    kind: "deploymentName";
    deploymentName: string;
} | {
    kind: "teamAndProjectSlugs";
    teamSlug: string;
    projectSlug: string;
};
export declare function projectSelection(ctx: Context, configuredDeployment: string | null, configuredAdminKey: string | undefined): Promise<ProjectSelection>;
export declare function fetchDeploymentCredentialsProvisionProd(ctx: Context, deploymentSelection: DeploymentSelection, { ensureLocalRunning }?: {
    ensureLocalRunning: boolean;
}): Promise<{
    url: string;
    adminKey: AdminKey;
    deploymentName?: string;
    deploymentType?: string;
}>;
export declare function fetchTeamAndProject(ctx: Context, deploymentName: string): Promise<{
    team: string;
    project: string;
    teamId: number;
    projectId: number;
}>;
export declare function fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows(ctx: Context, { teamSlug, projectSlug, }: {
    teamSlug: string;
    projectSlug: string;
} | {
    teamSlug: null;
    projectSlug: null;
}, deploymentType: DeploymentType, partitionId: number | undefined): Promise<{
    deploymentName: string;
    deploymentUrl: string;
    adminKey: AdminKey;
}>;
export {};
//# sourceMappingURL=api.d.ts.map