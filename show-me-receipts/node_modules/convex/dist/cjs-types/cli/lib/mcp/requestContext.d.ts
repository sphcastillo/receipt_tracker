import { Context, ErrorType } from "../../../bundler/context.js";
import { Filesystem } from "../../../bundler/fs.js";
import { Ora } from "ora";
import { DeploymentSelectionOptions } from "../api.js";
export interface McpOptions extends DeploymentSelectionOptions {
    projectDir?: string;
}
export declare class RequestContext implements Context {
    options: McpOptions;
    fs: Filesystem;
    deprecationMessagePrinted: boolean;
    spinner: Ora | undefined;
    _cleanupFns: Record<string, (exitCode: number, err?: any) => Promise<void>>;
    constructor(options: McpOptions);
    crash(args: {
        exitCode: number;
        errorType?: ErrorType;
        errForSentry?: any;
        printedMessage: string | null;
    }): Promise<never>;
    flushAndExit(): void;
    registerCleanup(fn: (exitCode: number, err?: any) => Promise<void>): string;
    removeCleanup(handle: string): (exitCode: number, err?: any) => Promise<void>;
}
export declare class RequestCrash {
    private exitCode;
    private errorType;
    printedMessage: string;
    constructor(exitCode: number, errorType: ErrorType | undefined, printedMessage: string | null);
}
//# sourceMappingURL=requestContext.d.ts.map